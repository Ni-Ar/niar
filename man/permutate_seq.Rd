% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_utils.R
\name{permutate_seq}
\alias{permutate_seq}
\title{Create same length sequence permutations for each letter}
\usage{
permutate_seq(
  sequence_length,
  alphabet = c("A", "C", "G", "T"),
  k = 5,
  verbose = FALSE,
  scramble = FALSE,
  seed = NULL
)
}
\arguments{
\item{sequence_length}{How long the sequences should be (keep this below 40)}

\item{alphabet}{Letters to permutate in order to build different sequences}

\item{k}{Pretty print option: show the first k rows per letter of the alphabet}

\item{verbose}{Show a pretty print summary data frame. Defatult \code{FALSE}.}

\item{scramble}{Randomize the order of the rows.}

\item{seed}{Integer passed to \code{set.seed()} just before data is scrambled to get reproducible results. Default is \code{NULL}.}
}
\value{
A data frame
}
\description{
Given a set of letters in an alphabet return a dataframe with all the possible permutations of those letters.#'
}
\details{
This is a handy wrapper of \code{gtools::permutation()} function to generate saturated permutation sequences of DNA.
The number of permutations increases rapidly with the length of the \code{alphabet} and \code{sequence_length}!, I made a pretty print function
that can be used to slice the permutation sequences and check the results.
To show the pretty print data frame use \code{verbose = TRUE}.

By default the sequences are returned in alphabetical order. With \code{scramble = TRUE} one can reshuffle the sequences in a random order.
}
\examples{
dat <- permutate_seq(sequence_length = 5, k = 3, verbose = T)
dat2 <- permutate_seq(sequence_length = 3, alphabet = c("W", "*", "X", "!", "\%", "7"), k = 7, verbose = T)

# To make many sequencing barcodes that follow this patter: 
# 'NNNN', 'AGCT', 'NNNN', 'TCAG', 'NNNN', 'TAGC', 'NNN', 'CAGT', 'NNN'

barcodes <- list()
for (i in 1:100) {
  tmp <- cbind( permutate_seq(sequence_length = 4, scramble = T), 'AGCT', 
                permutate_seq(sequence_length = 4, scramble = T), 'TCAG', 
                permutate_seq(sequence_length = 4, scramble = T), 'TAGC', 
                permutate_seq(sequence_length = 3, scramble = T), 'CAGT', 
                permutate_seq(sequence_length = 3, scramble = T) ) 
  # concatenate into one single sequence
  tmp <- apply(tmp, 1, paste0, collapse = "") |> data.frame() |> setNames('BC')
  
  barcodes[[i]] <- tmp
}

do.call('rbind', barcodes) |> unique() |> nrow()
# 25600 ( (N^4) * 100, where N = 4 )

}
\seealso{
\link{print_seq_perm}
}
